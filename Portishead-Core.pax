| package |
package := Package name: 'Portishead-Core'.
package paxVersion: 1;
	basicComment: 'Portishead - Pharo Compatibility for Dolphin Smalltalk'.


package classNames
	add: #Text;
	add: #UUID;
	yourself.

package methodNames
	add: #Behavior -> #portisheadShutDown:;
	add: #Behavior -> #portisheadStartUp:;
	add: #BlockClosure -> #forkAt:named:;
	add: #BlockClosure -> #valueWithPossibleArgument:;
	add: #ClassDescription -> #whichCategoryIncludesSelector:;
	add: #Collection -> #as:;
	add: #Collection -> #groupBy:having:;
	add: #Collection -> #groupedBy:;
	add: #Collection -> #groupedBy:having:;
	add: #Collection -> #ifEmpty:;
	add: #Date -> #asDateAndTime;
	add: #Exception -> #signalerContext;
	add: #Message -> #argument;
	add: #Message -> #argument:;
	add: #Object -> #flag:;
	add: #ProcessorScheduler -> #lowestPriority;
	add: #StackFrame -> #stackOfSize:;
	add: #String -> #asInteger;
	add: #String -> #asUnsignedInteger;
	add: #String -> #copyWithRegex:matchesReplacedWith:;
	add: #String -> #join:;
	add: #String -> #matchesRegex:;
	add: #String -> #substrings:;
	add: #String -> #uncapitalized;
	add: #Symbol -> #value:;
	add: #SystemDictionary -> #addToShutDownList:;
	add: #SystemDictionary -> #addToStartUpList:;
	add: 'Dictionary class' -> #newFrom:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	add: '..\Core\Contributions\IDB\IDB DateAndTime';
	add: '..\Core\Object Arts\Dolphin\ActiveX\Components\VBScript\VBScript Regular Expressions';
	yourself).

package!

"Class Definitions"!

String variableByteSubclass: #Text
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GUID variableByteSubclass: #UUID
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Behavior methodsFor!

portisheadShutDown: isQuitting

	"Pharo compatibility - send shutDown: or shutDown to the receiver depending on what it implements.
	We don't implement shutDown:/shutDown here to avoid clashing with Grease or making Grease dependent on Portishead"

	(self respondsTo: #shutDown:) ifTrue: [^self shutDown: isQuitting].
	(self respondsTo: #shutDown) ifTrue: [^self shutDown]!

portisheadStartUp: isSaving

	"Pharo compatibility - send startUp: or startUp to the receiver depending on what it implements.
	We don't implement startUp:/startUp here to avoid clashing with Grease or making Grease dependent on Portishead"

	(self respondsTo: #startUp:) ifTrue: [^self startUp: isSaving].
	(self respondsTo: #startUp) ifTrue: [^self startUp]! !
!Behavior categoriesFor: #portisheadShutDown:!public! !
!Behavior categoriesFor: #portisheadStartUp:!public! !

!BlockClosure methodsFor!

forkAt: anInteger named: aString

	^(self newProcess) 
		priority: anInteger;
		name: aString;
		resume!

valueWithPossibleArgument: anObject

	^self cull: anObject! !
!BlockClosure categoriesFor: #forkAt:named:!public!scheduling! !
!BlockClosure categoriesFor: #valueWithPossibleArgument:!*seaside-squeak-platform!public! !

!ClassDescription methodsFor!

whichCategoryIncludesSelector: aSelector

	| method all |

	method := self lookupMethod: aSelector.
	method isNil ifTrue: [^''].

	all := method methodClass whichNonVirtualCategoriesIncludeSelector: aSelector.
	^all isEmpty
		ifTrue: [MethodCategory unclassifiedName]
		ifFalse: [all anyOne name]! !
!ClassDescription categoriesFor: #whichCategoryIncludesSelector:!public! !

!Collection methodsFor!

as: aSimilarClass

	^aSimilarClass newFrom: self!

groupBy: keyBlock having: selectBlock 
	"This message is deprecated. Please use groupedBy:having:."

	#deprecated.

	^ self groupedBy: keyBlock having: selectBlock !

groupedBy: aBlock
	"Answer a dictionary whose keys are the result of evaluating aBlock
	for all my elements, and the value for each key is the selection of 
	my elements that evaluated to that key. Uses species."
	| groups |
	groups := LookupTable new.
	self do: [ :each |
		(groups at: (aBlock value: each) ifAbsentPut: [ OrderedCollection new ]) add: each ].
	self species ~~ OrderedCollection ifTrue: [
		groups associationsDo: [ :association |
			association value: (self species withAll: association value) ]].
	^ groups
!

groupedBy: aBlock having: aSelectionBlock
	"Like in SQL operation - Split the recievers contents into collections of 
	elements for which keyBlock returns the same results, and return those 
	collections allowed by selectBlock."
	^ (self groupedBy: aBlock) select: aSelectionBlock
!

ifEmpty: aBlock
	"Evaluate the given block, answering its value if the receiver is empty, otherwise answer the receiver."
	
	"Note that the fact that this method returns its receiver in case the receiver is not empty allows one to write expressions like the following ones: self classifyMethodAs: (myProtocol ifEmpty: ['As yet unclassified'])"

	^ self isEmpty 
		ifTrue: [ aBlock value ]
		ifFalse: [ self ]! !
!Collection categoriesFor: #as:!converting!public! !
!Collection categoriesFor: #groupBy:having:!public! !
!Collection categoriesFor: #groupedBy:!public! !
!Collection categoriesFor: #groupedBy:having:!public! !
!Collection categoriesFor: #ifEmpty:!public! !

!Date methodsFor!

asDateAndTime

	^DateAndTime date: self time: Time midnight! !
!Date categoriesFor: #asDateAndTime!public! !

!Dictionary class methodsFor!

newFrom: aCollectionOfAssociations

	^(self new: aCollectionOfAssociations size)
		addAll: aCollectionOfAssociations;
		yourself! !
!Dictionary class categoriesFor: #newFrom:!instance creation!public! !

!Exception methodsFor!

signalerContext

	^self signalFrame! !
!Exception categoriesFor: #signalerContext!accessing!public! !

!Message methodsFor!

argument

	^args at: 1!

argument: anObject

	^args at: 1 put: anObject! !
!Message categoriesFor: #argument!accessing!public! !
!Message categoriesFor: #argument:!accessing!public! !

!Object methodsFor!

flag: aSymbol
	"Send this message, with a relevant symbol as argument, to flag a message for subsequent retrieval.  For example, you might put the following line in a number of messages:
	self flag: #returnHereUrgently
	Then, to retrieve all such messages, browse all senders of #returnHereUrgently."! !
!Object categoriesFor: #flag:!public! !

!ProcessorScheduler methodsFor!

lowestPriority

	^self systemBasePriority! !
!ProcessorScheduler categoriesFor: #lowestPriority!priority names!public! !

!StackFrame methodsFor!

stackOfSize: anInteger

	^(self stackTrace: anInteger) subStrings: Character cr! !
!StackFrame categoriesFor: #stackOfSize:!printing!private! !

!String methodsFor!

asInteger

	^self asNumber asInteger!

asUnsignedInteger
	"Returns the first integer it can find or nil."

	| stream |
	stream := self readStream.
	[stream atEnd or: [stream peek isDigit]] whileFalse: [stream next].

	^stream atEnd
		ifTrue: [nil]
		ifFalse: [Integer readFrom: stream]!

copyWithRegex: rxString matchesReplacedWith: aString

	^(IRegExp2 pattern: rxString)
		replace: self replaceString: aString!

join: aCollection 
	"'*' join: #('WWWWW' 'W  EW' 'zzzz')
		->  'WWWWW*W  EW*zzzz' "
	^ self class new: (aCollection size * self size) streamContents: [:stream | 
			aCollection
				do: [:each | stream nextPutAll: each asString] 
				separatedBy: [stream nextPutAll: self]]!

matchesRegex: aString

	^(IRegExp2 new pattern: aString) test: self!

substrings: separators

	^self subStringsAnsi: separators!

uncapitalized
	"Return a copy with the first letter downShifted (in lower case)"
	
	| answer |
	self ifEmpty: [ ^ self copy ].
	answer := self copy.
	answer at: 1 put: answer first asLowercase.
	^ answer! !
!String categoriesFor: #asInteger!converting!public! !
!String categoriesFor: #asUnsignedInteger!converting!public! !
!String categoriesFor: #copyWithRegex:matchesReplacedWith:!public! !
!String categoriesFor: #join:!public! !
!String categoriesFor: #matchesRegex:!public!testing! !
!String categoriesFor: #substrings:!converting!public! !
!String categoriesFor: #uncapitalized!converting!public! !

!Symbol methodsFor!

value: anObject

	^anObject perform: self! !
!Symbol categoriesFor: #value:!public! !

!SystemDictionary methodsFor!

addToShutDownList: anObject

	"Add anObject to the shutdown list of the system. On shutdown or before image save the message #shutDown: or #shutDown will be sent to anObject"

	SessionManager current
		when: #sessionStarted send: #portisheadShutDown: to: anObject with: true;
		when: #imageSaveCompleted send: #portisheadShutDown: to: anObject with: false!

addToStartUpList: anObject

	"Add anObject to the startup list of the system. On shutdown or after an image save the message #startUp: or #startUp will be sent to anObject"

	SessionManager current
		when: #sessionStarted send: #portisheadStartUp: to: anObject with: true;
		when: #imageSaveCompleted send: #portisheadStartUp: to: anObject with: false! !
!SystemDictionary categoriesFor: #addToShutDownList:!public! !
!SystemDictionary categoriesFor: #addToStartUpList:!public! !

"End of package definition"!

